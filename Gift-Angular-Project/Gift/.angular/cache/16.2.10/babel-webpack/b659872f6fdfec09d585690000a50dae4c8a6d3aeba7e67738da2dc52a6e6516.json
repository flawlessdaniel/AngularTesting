{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GifsService {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this.API_KEY = 'e1A6qifszNu2aqkRR0VC2UWPLGNqHJd4';\n    this.BASE_URL = 'https://api.giphy.com/v1/gifs/search';\n    this.Gifs = [];\n    this.queries = [];\n  }\n  searchGifts(query) {\n    const httpParams = new HttpParams();\n    httpParams.set('api_key', this.API_KEY);\n    httpParams.set('q', query);\n    httpParams.set('limit', '10');\n    this._httpClient.get(`${this.BASE_URL}`, {\n      params: httpParams\n    }).subscribe(response => {\n      this.Gifs = response.data;\n    });\n  }\n  addQuery(query) {\n    this.queries.push(query);\n  }\n  static #_ = this.ɵfac = function GifsService_Factory(t) {\n    return new (t || GifsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GifsService,\n    factory: GifsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["GifsService","constructor","_httpClient","API_KEY","BASE_URL","Gifs","queries","searchGifts","query","httpParams","HttpParams","set","get","params","subscribe","response","data","addQuery","push","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Daniel\\Angular\\Gift-Angular-Project\\Gift\\src\\app\\Gifs\\Services\\gift.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Gif, SearchResponse } from '../Interfaces/gifs.interfaces';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GifsService {\n\n  constructor(private _httpClient:HttpClient) { }\n\n  private API_KEY: string = 'e1A6qifszNu2aqkRR0VC2UWPLGNqHJd4';\n  private BASE_URL: string = 'https://api.giphy.com/v1/gifs/search';\n  public Gifs: Gif[] = []\n  public queries: string[] = [];\n\n  public searchGifts(query: string): void {\n\n    const httpParams = new HttpParams();\n    httpParams.set('api_key', this.API_KEY);\n    httpParams.set('q', query);\n    httpParams.set('limit', '10');\n\n    this._httpClient.get<SearchResponse>(`${this.BASE_URL}`, {params: httpParams})\n    .subscribe((response: SearchResponse) => {\n      this.Gifs = response.data;\n    });\n  }\n\n  public addQuery(query: string): void {\n    this.queries.push(query);\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,WAAsB;IAAtB,KAAAA,WAAW,GAAXA,WAAW;IAEvB,KAAAC,OAAO,GAAW,kCAAkC;IACpD,KAAAC,QAAQ,GAAW,sCAAsC;IAC1D,KAAAC,IAAI,GAAU,EAAE;IAChB,KAAAC,OAAO,GAAa,EAAE;EALiB;EAOvCC,WAAWA,CAACC,KAAa;IAE9B,MAAMC,UAAU,GAAG,IAAIC,UAAU,EAAE;IACnCD,UAAU,CAACE,GAAG,CAAC,SAAS,EAAE,IAAI,CAACR,OAAO,CAAC;IACvCM,UAAU,CAACE,GAAG,CAAC,GAAG,EAAEH,KAAK,CAAC;IAC1BC,UAAU,CAACE,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;IAE7B,IAAI,CAACT,WAAW,CAACU,GAAG,CAAiB,GAAG,IAAI,CAACR,QAAQ,EAAE,EAAE;MAACS,MAAM,EAAEJ;IAAU,CAAC,CAAC,CAC7EK,SAAS,CAAEC,QAAwB,IAAI;MACtC,IAAI,CAACV,IAAI,GAAGU,QAAQ,CAACC,IAAI;IAC3B,CAAC,CAAC;EACJ;EAEOC,QAAQA,CAACT,KAAa;IAC3B,IAAI,CAACF,OAAO,CAACY,IAAI,CAACV,KAAK,CAAC;EAC1B;EAAC,QAAAW,CAAA,G;qBAxBUnB,WAAW,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXxB,WAAW;IAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
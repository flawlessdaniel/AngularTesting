{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GifsService {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this.API_KEY = 'e1A6qifszNu2aqkRR0VC2UWPLGNqHJd4';\n    this.BASE_URL = 'https://api.giphy.com/v1/gifs/search';\n    this.Gifs = [];\n    this.queries = [];\n  }\n  searchGifts(query) {\n    const params = new HttpParams().set('api_key', this.API_KEY).set('q', query).set('limit', 10);\n    this._httpClient.get(`${this.BASE_URL}`, {\n      params\n    }).subscribe(response => {\n      this.Gifs = response.data;\n      this.saveLocalStorage('gifs', JSON.stringify(this.Gifs));\n    });\n  }\n  addQuery(query) {\n    this.queries.push(query);\n    this.saveLocalStorage('queries', JSON.stringify(this.queries));\n  }\n  organizeQueries(query) {\n    if (this.queries.includes(query)) {\n      this.queries.filter(q => q !== query);\n    }\n    this.queries.unshift(query);\n    this.queries = this.queries.splice(0, 10);\n  }\n  saveLocalStorage(key, value) {\n    localStorage.setItem(key, value);\n  }\n  loadLocalStorage() {\n    this.queries = JSON.parse(localStorage.getItem('queries') || '[]');\n    this.Gifs = JSON.parse(localStorage.getItem('gifs') || '[]');\n    console.log(\"on Init\");\n  }\n  static #_ = this.ɵfac = function GifsService_Factory(t) {\n    return new (t || GifsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GifsService,\n    factory: GifsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpParams","GifsService","constructor","_httpClient","API_KEY","BASE_URL","Gifs","queries","searchGifts","query","params","set","get","subscribe","response","data","saveLocalStorage","JSON","stringify","addQuery","push","organizeQueries","includes","filter","q","unshift","splice","key","value","localStorage","setItem","loadLocalStorage","parse","getItem","console","log","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Daniel\\Angular\\Gift-Angular-Project\\Gift\\src\\app\\Gifs\\Services\\gift.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Gif, SearchResponse } from '../Interfaces/gifs.interfaces';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GifsService {\n\n  constructor(private _httpClient:HttpClient) { }\n\n  private API_KEY: string = 'e1A6qifszNu2aqkRR0VC2UWPLGNqHJd4';\n  private BASE_URL: string = 'https://api.giphy.com/v1/gifs/search';\n\n  public Gifs: Gif[] = []\n  public queries: string[] = [];\n\n  public searchGifts(query: string): void {\n\n    const params = new HttpParams()\n    .set('api_key', this.API_KEY)\n    .set('q', query)\n    .set('limit', 10);\n\n    this._httpClient.get<SearchResponse>(`${this.BASE_URL}`, { params })\n    .subscribe((response: SearchResponse) => {\n      this.Gifs = response.data;\n      this.saveLocalStorage('gifs', JSON.stringify(this.Gifs));\n    });\n  }\n\n  public addQuery(query: string): void {\n    this.queries.push(query);\n    this.saveLocalStorage('queries', JSON.stringify(this.queries));\n  }\n\n  public organizeQueries(query: string): void {\n    if (this.queries.includes(query)) {\n      this.queries.filter((q: string) => q !== query);\n    }\n\n    this.queries.unshift(query);\n    this.queries = this.queries.splice(0, 10);\n  }\n\n  private saveLocalStorage(key:string, value:string): void {\n    localStorage.setItem(key, value);\n  }\n\n  private loadLocalStorage(){\n    this.queries = JSON.parse(localStorage.getItem('queries') || '[]');\n    this.Gifs = JSON.parse(localStorage.getItem('gifs') || '[]');\n    console.log(\"on Init\");\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAK7D,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,WAAsB;IAAtB,KAAAA,WAAW,GAAXA,WAAW;IAEvB,KAAAC,OAAO,GAAW,kCAAkC;IACpD,KAAAC,QAAQ,GAAW,sCAAsC;IAE1D,KAAAC,IAAI,GAAU,EAAE;IAChB,KAAAC,OAAO,GAAa,EAAE;EANiB;EAQvCC,WAAWA,CAACC,KAAa;IAE9B,MAAMC,MAAM,GAAG,IAAIV,UAAU,EAAE,CAC9BW,GAAG,CAAC,SAAS,EAAE,IAAI,CAACP,OAAO,CAAC,CAC5BO,GAAG,CAAC,GAAG,EAAEF,KAAK,CAAC,CACfE,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC;IAEjB,IAAI,CAACR,WAAW,CAACS,GAAG,CAAiB,GAAG,IAAI,CAACP,QAAQ,EAAE,EAAE;MAAEK;IAAM,CAAE,CAAC,CACnEG,SAAS,CAAEC,QAAwB,IAAI;MACtC,IAAI,CAACR,IAAI,GAAGQ,QAAQ,CAACC,IAAI;MACzB,IAAI,CAACC,gBAAgB,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACZ,IAAI,CAAC,CAAC;IAC1D,CAAC,CAAC;EACJ;EAEOa,QAAQA,CAACV,KAAa;IAC3B,IAAI,CAACF,OAAO,CAACa,IAAI,CAACX,KAAK,CAAC;IACxB,IAAI,CAACO,gBAAgB,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACX,OAAO,CAAC,CAAC;EAChE;EAEOc,eAAeA,CAACZ,KAAa;IAClC,IAAI,IAAI,CAACF,OAAO,CAACe,QAAQ,CAACb,KAAK,CAAC,EAAE;MAChC,IAAI,CAACF,OAAO,CAACgB,MAAM,CAAEC,CAAS,IAAKA,CAAC,KAAKf,KAAK,CAAC;;IAGjD,IAAI,CAACF,OAAO,CAACkB,OAAO,CAAChB,KAAK,CAAC;IAC3B,IAAI,CAACF,OAAO,GAAG,IAAI,CAACA,OAAO,CAACmB,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC;EAC3C;EAEQV,gBAAgBA,CAACW,GAAU,EAAEC,KAAY;IAC/CC,YAAY,CAACC,OAAO,CAACH,GAAG,EAAEC,KAAK,CAAC;EAClC;EAEQG,gBAAgBA,CAAA;IACtB,IAAI,CAACxB,OAAO,GAAGU,IAAI,CAACe,KAAK,CAACH,YAAY,CAACI,OAAO,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;IAClE,IAAI,CAAC3B,IAAI,GAAGW,IAAI,CAACe,KAAK,CAACH,YAAY,CAACI,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;IAC5DC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACxB;EAAC,QAAAC,CAAA,G;qBA9CUnC,WAAW,EAAAoC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXxC,WAAW;IAAAyC,OAAA,EAAXzC,WAAW,CAAA0C,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}